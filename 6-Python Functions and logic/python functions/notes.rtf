— def sing_song():
  print("You may say I'm a dreamer")
  print("But I'm not the only one")
  print("I hope some day you'll join us")
  print("And the world will be as one")
  
# call sing_song() below:
sing_song()
sing_song()


—def loading_screen():
  print("This page is loading...")

loading_screen()



—def mult_two_add_three(number):
  print(number*2 + 3)
  
# Call mult_two_add_three() here:
mult_two_add_three(0)



def mult_x_add_y(number,x,y):
  print(number*x + y)

mult_x_add_y(1,3,1)

—

—Keyword Arguments
In our greet_customer() function from the last exercise, we had two arguments:
def greet_customer(grocery_store, special_item):
  print("Welcome to "+ grocery_store + ".")
  print("Our special is " + special_item + ".")
  print("Have fun shopping!")
Whichever value is put into greet_customer() first is assigned to grocery_store, and whichever value is put in second is assigned to special_item. These are called positional arguments because their assignments depend on their positions in the function call.
We can also pass these arguments as keyword arguments, where we explicitly refer to what each argument is assigned to in the function call.
greet_customer(special_item="chips and salsa", grocery_store="Stu's Staples")
Welcome to Stu's Staples.
Our special is chips and salsa.
Have fun shopping!
We can use keyword arguments to make it explicit what each of our arguments to a function should refer to in the body of the function itself.
We can also define default arguments for a function using syntax very similar to our keyword-argument syntax, but used during the function definition. If the function is called without an argument for that parameter, it relies on the default.
def greet_customer(special_item, grocery_store="Engrossing Grocers"):
  print("Welcome to "+ grocery_store + ".")
  print("Our special is " + special_item + ".")
  print("Have fun shopping!")
In this case, grocery_store has a default value of "Engrossing Grocers". If we call the function with only one argument, the value of "Engrossing Grocers" is used for grocery_store:
greet_customer("bananas")
Welcome to Engrossing Grocers.
Our special is bananas.
Have fun shopping!
Once you give an argument a default value (making it a keyword argument), no arguments that follow can be used positionally. For example:
def greet_customer(special_item="bananas", grocery_store): # this is not valid
  ...

def greet_customer(special_item, grocery_store="Engrossing Grocers"): # this is valid
  ...








—- def calculate_age(current_year, birth_year):
  age = current_year - birth_year
  return age

my_age=calculate_age(2049,1993)

dads_age=calculate_age(2049,1953)

print('I am', my_age, 'years old and my dad is', dads_age, 'years old')







—- def get_boundaries(target, margin):
  low_limit=target-margin
  high_limit=margin+target
  return low_limit,high_limit

low,high=get_boundaries(100,20)
print(low)
print(high)





—- Scope
Let’s say we have our function from the last exercise that creates a string about a special item:
def create_special_string(special_item):
  return "Our special is " + special_item + "."
What if we wanted to access the variable special_item outside of the function? Could we use it?
def create_special_string(special_item):
  return "Our special is " + special_item + "."

print("I don't like " + special_item)
If we try to run this code, we will get a NameError, telling us that 'special_item' is not defined. The variable special_item has only been defined inside the space of a function, so it does not exist outside the function. We call the part of a program where special_item can be accessed its scope. The scope of special_item is only the create_special_string function.
Variables defined outside the scope of a function may be accessible inside the body of the function:
header_string = "Our special is " 

def create_special_string(special_item):
  return header_string + special_item + "."
print(create_special_string("grapes"))
There is no error here. header_string can be used inside the create_special_string function because the scope of header_string is the whole file. This file would produce:
Our special is grapes.






—-  def repeat_stuff(stuff,num_repeats=10):
  return stuff*num_repeats

lyrics=repeat_stuff('Row ',3)+'Your Boat. '

song=repeat_stuff(lyrics)

print(song)

